法1：
public class Solution {
    public void rotate(int[] nums, int k) {
        int[] temp = new int[nums.length];
        for(int i = 0; i < nums.length; i++) {
            temp[(i+k)%nums.length] = nums[i];
        }
        for(int i = 0; i < nums.length; i++) {
            nums[i] = temp[i];
        }
    }
}

法2：
public class Solution {
    public void rotate(int[] nums, int k) {
        k = k % nums.length;
        int count = 0; //一共移动nums.length个数
        for(int start = 0; count < nums.length; start++) {
            int prev = nums[start];
            int current = start; //当前指向的元素的索引
            do {
                int next = (current+k)%nums.length; //current移动到next的位置
                int temp = nums[next];
                nums[next] = prev;
                prev = temp;
                current = next;
                count++;
            } while(start != current);
        }
    }
}

法3：
public class Solution {
    public void rotate(int[] nums, int k) {
        k = k % nums.length;
        reverse(nums,0,nums.length-1); //数组反转
        reverse(nums,0,k-1); //前k个元素反转
        reverse(nums,k,nums.length-1); //后n-k个元素反转
    }
    private void reverse(int[] nums, int start, int end) {
        while(start < end) {
            int temp = nums[end];
            nums[end--] = nums[start];
            nums[start++] = temp;
        }
    }
}