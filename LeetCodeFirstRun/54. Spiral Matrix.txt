public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<>();
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return result;
        }
        boolean[][] visited = new boolean[matrix.length][matrix[0].length];
        int i = 0, j = 0, direction = 0;
        while(true) {
            if(i < 0 || j < 0 || i >= matrix.length || j >= matrix[0].length || visited[i][j]) {
                break;
            }
            result.add(matrix[i][j]);
            visited[i][j] = true;
            switch(direction) {
                case 0 :
                    if(j + 1 < matrix[0].length && !visited[i][j + 1]) {
                        j++;
                    }
                    else {
                        direction = (direction + 1) % 4;
                        i++;
                    }
                    break;
                case 1 :
                    if(i + 1 < matrix.length && !visited[i + 1][j]) {
                        i++;
                    }
                    else {
                        direction = (direction + 1) % 4;
                        j--;
                    }
                    break;
                case 2 :
                    if(j - 1 >= 0 && !visited[i][j - 1]) {
                        j--;
                    }
                    else {
                        direction = (direction + 1) % 4;
                        i--;
                    }
                    break;
                case 3 :
                    if(i - 1 >= 0 && !visited[i-1][j]) {
                        i--;
                    }
                    else {
                        direction = (direction + 1) % 4;
                        j++;
                    }
            }
        }
        return result;
    }
}